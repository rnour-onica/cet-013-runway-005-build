AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template with Bastion Host
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: KPRN_1
  VPC:
    Type: String
  PublicSubnet1Id:
    Type: String
  PublicSubnet2Id:
    Type: String
  PrivateSubnet1Id:
    Type: String
  PrivateSubnet2Id:
    Type: String
  InstanceTypePublic1:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
  InstanceTypePublic2:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium

  InstanceTypePrivate1:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium

  InstanceTypePrivate2:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium

Mappings:
  Regions:
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309
    us-east-2:
      HVM64: ami-0b59bfac6be064b78
      HVMG2: NOT_SUPPORTED
Resources:
  PublicEc2A:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Install: ["Install"]
        Install:
          packages:
            yum:
              httpd: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId:
        Fn::FindInMap:
          - Regions
          - Ref: AWS::Region
          - HVM64
      SubnetId: !Ref PublicSubnet1Id
      SecurityGroupIds:
      - !Ref SecurityGroup
      Tags:
       -
        Key: "Name"
        Value: "PublicInstance"
      KeyName:
        Ref: KeyName
      InstanceType:
        Ref: InstanceTypePublic1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack  ${AWS::StackName} -r PublicEc2A --region  ${AWS::Region} --configsets Install || error_exit 'Failed to run cfn-init'


  PublicEc2B:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Install: ["Install"]
        Install:
          packages:
            yum:
              httpd: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId:
        Fn::FindInMap:
          - Regions
          - Ref: AWS::Region
          - HVM64
      SubnetId: !Ref PublicSubnet2Id
      SecurityGroupIds:
      - !Ref SecurityGroup
      Tags:
       -
        Key: "Name"
        Value: "PublicInstance"
      KeyName:
        Ref: KeyName
      InstanceType:
        Ref: InstanceTypePublic2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack  ${AWS::StackName} -r PublicEc2B --region  ${AWS::Region} --configsets Install || error_exit 'Failed to run cfn-init'

  PrivateEc2A:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Install: ["Install"]
        Install:
          packages:
            yum:
              httpd: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId:
        Fn::FindInMap:
          - Regions
          - Ref: AWS::Region
          - HVM64
      SubnetId: !Ref PrivateSubnet1Id
      SecurityGroupIds:
      - !Ref PrivateSecurityGroup
      Tags:
        - Key: "Name"
          Value: "PrivateWebserverA"
      KeyName:
        Ref: KeyName
      InstanceType:
        Ref: InstanceTypePrivate1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack  ${AWS::StackName} -r   PrivateEc2A --region  ${AWS::Region} --configsets Install || error_exit 'Failed to run cfn-init'

  PrivateEc2B:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Install: ["Install"]
        Install:
          packages:
            yum:
              httpd: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      ImageId:
        Fn::FindInMap:
          - Regions
          - Ref: AWS::Region
          - HVM64
      SubnetId: !Ref PrivateSubnet2Id
      SecurityGroupIds:
      - !Ref PrivateSecurityGroup
      Tags:
       -
        Key: "Name"
        Value: "PrivateWebserverB"
      KeyName:
        Ref: KeyName
      InstanceType:
        Ref: InstanceTypePrivate2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack  ${AWS::StackName} -r PrivateEc2B --region  ${AWS::Region} --configsets Install || error_exit 'Failed to run cfn-init'
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  

Outputs:
  PublicIp1:
    Description: IP of the bastion site
    Value: !Join
      - ""
      - - http://
        - Fn::GetAtt:
            - PublicEc2A
            - PublicIp

  PublicIp2:
    Description: IP of the public site
    Value: !Join
      - ""
      - - http://
        - Fn::GetAtt:
            - PublicEc2B
            - PublicIp

  PrivateIp1:
    Description: IP of the first private site
    Value: !Join
      - ""
      - - http://
        - Fn::GetAtt:
            - PrivateEc2A
            - PrivateIp

  PrivateIp2:
    Description: IP of the second private site
    Value: !Join
      - ""
      - - http://
        - Fn::GetAtt:
            - PrivateEc2B
            - PrivateIp